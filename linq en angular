 $scope.ok = function () {
            season = this.season;

            var $d = $q.defer();
            var promesas = [];

            var seasons = options.dataSeason;
            var teams = options.dataTeams;
            
               
               var objSeason = $linq.Enumerable().From(seasons).Where("p => p.Id ==" + season).Select().FirstOrDefault();
               var lstDivision = $linq.Enumerable().From($scope.Teams)
               .Where("p => p.SeasonId ==" + season)
               .GroupBy("g => g.DivisionId")
               .Select("Group => Group.FirstOrDefault()")
               //.Select("s => s.DivisionId")
               .ToArray();
               /*var lstDivision = $linq.Enumerable().From(teams)
               .Where("p => p.SeasonId ==" + season)
               .Select()
               .ToArray();*/

                
               /*var lstDivisionComplete = $linq.Enumerable().From(teams)
               .Where("p => p.SeasonId ==" + season)
               .Select("s => s.DivisionId")
               .ToArray();
               console.log(lstDivisionComplete);

               var lstDivisionExcept = $linq.Enumerable().From(schedules)
               .Where("p => p.SeasonId ==" + season)
               .Select("s => s.DivisionId")
               .ToArray();
               console.log(lstDivisionExcept);

               var lstDivision = $linq.Enumerable().From(lstDivisionComplete).Except(lstDivisionExcept).ToArray();
               console.log(lstDivision);
*/

                /*var lstCountDivision = $linq.Enumerable().From(teams)
               .Where("p => p.SeasonId ==" + season)
               .GroupBy("g => g.DivisionId")
               .Select("Group => Group.FirstOrDefault()")
               .ToArray();

               console.log(lstCountDivision);*/

               var seasonStart = new Date(objSeason.SeasonStart);
               var seasonEnd = new Date(objSeason.SeasonEnd);

               var countFourTeamForDivision = 0;// esta variable verifica si se ingresaron 4 equipos por divisions
               for (var l = 0; l < lstDivision.length; l++) {
                        var teamsDivision  = $linq.Enumerable().From($scope.Teams)
                            .Where("p => p.DivisionId ==" + lstDivision[l].DivisionId)
                            .ToArray();

                   if (teamsDivision.length >= 4) {
                         countFourTeamForDivision += 1;// si se ingresaron 4 equipos por divisions la temporada quedara completa
                        
                         var ranVenues = common.shuffle(venues);
                        
                         if (ranVenues.length === 0) {
                             $scope.error_message = parameters.error_message.noVenuesFound;
                             return;
                         }
                         

                         var indexVenues = 0;
                         var countPartidos = 0;

                            for (var j = 0; j < teamsDivision.length; j++) {
                                for (var k = j; k < teamsDivision.length; k++) {
                                    if (teamsDivision[j].Id !== teamsDivision[k].Id) {

                                        countPartidos += 1;
                                        var scheduleValues = {};

                                        var ranTeams = Math.floor((Math.random() * 2) + 1);

                                        if (ranTeams === 1) {
                                            scheduleValues.HomeTeamId = teamsDivision[j].Id;
                                            scheduleValues.AwayTeamId = teamsDivision[k].Id;
                                        } else {
                                            scheduleValues.HomeTeamId = teamsDivision[k].Id;
                                            scheduleValues.AwayTeamId = teamsDivision[j].Id;
                                        }

                                        if (ranVenues[indexVenues] == undefined) {
                                            indexVenues = 0;
                                            scheduleValues.VenueId = ranVenues[indexVenues].Id;
                                        } else {
                                            scheduleValues.VenueId = ranVenues[indexVenues].Id;
                                            indexVenues += 1;
                                        }

                                        scheduleValues.Status = "Scheduled";

                                        scheduleValues.DivisionId = lstDivision[l].DivisionId;
                                        scheduleValues.SeasonId = season;

                                        scheduleValues.GoalsHomeTeam = null;
                                        scheduleValues.GoalsAwayTeam = null;
                                        scheduleValues.IsHidden = false;

                                        var encontrado = false;


                                        while (encontrado === false) {
                                            var ranFecha = common.randomDate(seasonStart, seasonEnd);
                                            
                                            if (ranFecha.getDay() === 0) {
                                                if (countPartidos % 2 === 0) {
                                                    ranFecha.setHours(14, 0, 0);
                                                    scheduleValues.DateTime = ranFecha.toISOString();
                                                    encontrado = true;

                                                } else {
                                                    ranFecha.setHours(10, 0, 0);
                                                    scheduleValues.DateTime = ranFecha.toISOString();
                                                    encontrado = true;
                                                }
                                            }
                                        }
                                        
                                          var promesa =  datacontext.addSchedule(options.webUrl,scheduleValues);
                                          promesas.push(promesa);
                                    }
                                }
                            }

                  }
               }

              /* if (lstDivision.length!=0 && lstDivision.length === countFourTeamForDivision) {
                  
                   var objSeasonActive = {};
                   objSeasonActive.Id = season;
                   objSeasonActive.Active = true;
                   datacontext.editSeasonActive(options.webUrl,objSeasonActive);
               }  */
               $q.all(promesas).then(function(promesasRes){
                      $d.resolve(promesasRes);
                      //console.log("terminado");
                      $modalInstance.close();
                  }) 
           };
